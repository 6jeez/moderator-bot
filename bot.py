from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from filters import IsAdminFilter
from gtts import gTTS
import datetime
import random
import asyncio
import config
import time
import db
import os
from aiogram import Bot, Dispatcher, executor, types
   

bot = Bot(token='(TOKEN)', parse_mode="html")
dp = Dispatcher(bot)


db.CreateUserDB()
db.CreateChatDB()


dp.filters_factory.bind(IsAdminFilter)


async def started(dp):
	await bot.send_message(chat_id=(admin_id), text='‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


group_rules = {}


@dp.message_handler(commands=['—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–ø—Ä–∞–≤–∏–ª–∞'])
async def set_rules(message: types.Message):
    chat_id = message.chat.id
    if message.reply_to_message and message.reply_to_message.text:
        group_rules[chat_id] = message.reply_to_message.text
        await message.answer("–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥–æ–π /—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–ø—Ä–∞–≤–∏–ª–∞")


@dp.message_handler(commands=['–æ—á–∏—Å—Ç–∏—Ç—å_–ø—Ä–∞–≤–∏–ª–∞'])
async def clear_rules(message: types.Message):
    chat_id = message.chat.id
    if chat_id in group_rules:
        del group_rules[chat_id]
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã")
    else:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª")


@dp.message_handler(commands=['–ø—Ä–∞–≤–∏–ª–∞'])
async def show_rules(message: types.Message):
    chat_id = message.chat.id
    if chat_id in group_rules:
        rules = group_rules[chat_id]
        await message.answer(f"–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã: {rules}")
    else:
        await message.answer("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


@dp.message_handler(commands=['chat'])
async def start_command(message: types.Message):
    chat_id = message.chat.id
    await message.reply(f"–ß–∞—Ç –∏–¥: {chat_id}")


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!')
    await message.delete()      


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_link = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
    await message.reply(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–æ—Ç, {user_link}, —è –ø–æ–º–æ–≥—É —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π –≥—Ä—É–ø–ø–æ–π! –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ. –£–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã - /—Ö–µ–ª–ø', parse_mode='HTML')


@dp.message_handler(content_types=["left_chat_member"])
async def left_member(message: types.Message):
    user_link = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
    await message.reply(f'–ü–æ–∫–∞, {user_link}!üòî', parse_mode='HTML') 
    await message.delete()


@dp.message_handler(commands='—Ö–µ–ª–ø')
async def commands(message):
    await message.reply(f'–î–ª—è –Ω–æ–≤–∏—á–∫–æ–≤:\n/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ\n/help - –∫–æ–º–∞–Ω–¥—ã\n\n–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞:\n/—Ä–µ–ø–æ—Ä—Ç - —Ä–µ–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ)\n+ - –ø–æ–≤—ã—Å–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n- - –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é\n–ë–æ—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n/–ø—Ä–∞–≤–∏–ª–∞ - –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n/—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–ø—Ä–∞–≤–∏–ª–∞ (—Ç–µ–∫—Å—Ç) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n/–æ—á–∏—Å—Ç–∏—Ç—å_–ø—Ä–∞–≤–∏–ª–∞ - –æ—á–∏—Å—Ç–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n/chat - —É–∑–Ω–∞—Ç—å –∞–π–¥–∏ —á–∞—Ç–∞\n/mute, /–º—É—Ç (–≤—Ä–µ–º—è) (–¥,–¥–Ω–µ–π,–¥–µ–Ω—å,—á,—á–∞—Å–æ–≤,—á–∞—Å,–º,–º–∏–Ω—É—Ç,–º–∏–Ω—É—Ç—ã) (–ø—Ä–∏—á–∏–Ω–∞) - –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/—Ä–∞–∑–º—É—Ç, /unmute - —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/–±–∞–Ω, /ban (—Ç–æ–ª—å–∫–æ –Ω–∞–≤—Å–µ–≥–¥–∞) (–ø—Ä–∏—á–∏–Ω–∞) - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/—Ä–∞–∑–±–∞–Ω, /unban - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/–ø—Ä–æ—Ñ–∏–ª—å, /–ø, /profile, /p - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/—Ä–∞–±–æ—Ç–∞, /work - —Ä–∞–±–æ—Ç–∞—Ç—å (–ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏)\n/–¥–∞—Ç—å, /give - –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏\n/—Ç–æ–ø, /top - —Ç–æ–ø –ø–æ –¥–µ–Ω—å–≥–∞–º')


@dp.message_handler(lambda msg: msg.text.lower() == '–±–æ—Ç')
async def check_bot(message):
    await message.reply('‚úÖ–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!')


@dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='!?./', is_chat_admin=True)
async def mute(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   try:
      muteint = int(message.text.split()[1])
      mutetype = message.text.split()[2]
      comment = " ".join(message.text.split()[3:])
   except IndexError:
      await message.reply('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!\n–ü—Ä–∏–º–µ—Ä:\n<code>/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>')
      return
   if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(hours=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüõë–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')
   if mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(minutes=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüõë–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')
   if mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
      await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=datetime.timedelta(days=muteint))
      await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüõë–ó–∞–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: {muteint} {mutetype}\nüìÉ–ü—Ä–∏—á–∏–Ω–∞: {comment}')


@dp.message_handler(commands=['—Ä–∞–∑–º—É—Ç', 'unmute'], commands_prefix='!?./', is_chat_admin=True)
async def unmute(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüîä–†–∞–∑–º—É—Ç–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')


@dp.message_handler(commands=['ban', '–±–∞–Ω', '–∫–∏–∫', 'kick'], commands_prefix='!?./', is_chat_admin=True)
async def ban(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   comment = " ".join(message.text.split()[1:])
   await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüõë–ó–∞–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>\n‚è∞–°—Ä–æ–∫: –Ω–∞–≤—Å–µ–≥–¥–∞\nüìÉ–ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {comment}')


@dp.message_handler(commands=['—Ä–∞–∑–±–∞–Ω', 'unban'], commands_prefix='!?./', is_chat_admin=True)
async def unban(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'üë§–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <a href="tg://?id={message.from_user.id}">{message.from_user.first_name}</a>\nüì≤–†–∞–∑–±–∞–Ω–∏–ª: <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>')


@dp.message_handler(lambda msg: msg.text.lower().startswith('+'))
async def plus_rep(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   if message.from_user.id == message.reply_to_message.from_user.id:
      await message.reply("–ê –Ω–µ–ª—å–∑—è –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–µ–±–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é!üñï")
      return
   db.UpdateUserValue('reputation', 1, message.reply_to_message.from_user.id)
   db.con.commit()
   await message.reply("–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æüëç")


@dp.message_handler(lambda msg: msg.text.lower().startswith('-'))
async def minus_rep(message):
   if not message.reply_to_message:
      await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
      return
   if message.from_user.id == message.reply_to_message.from_user.id:
      await message.reply("–ê –Ω–µ–ª—å–∑—è –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å —Å–µ–±–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é!üñï")
      return
   db.UpdateUserValueMinus('reputation', 1, message.reply_to_message.from_user.id)
   db.con.commit()
   await message.reply("–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞—Å—á–∏—Ç–∞–Ω–æüëé")


@dp.message_handler(commands=['work', '—Ä–∞–±–æ—Ç–∞'], commands_prefix='!?./')
async def work(message):
    new_money = random.randint(0, 500)
    db.UpdateUserValue('money', new_money, message.from_user.id)
    db.con.commit()
    user_link = f'<a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>'
    await message.reply(f"{user_link}, –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {new_money}$ü§ë", parse_mode='HTML')


@dp.message_handler(commands=['–¥–∞—Ç—å', 'give'], commands_prefix='!?./')
async def give_money(message):
   if not message.reply_to_message:
      await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
      return
   try:
      mtransfer = int(message.text.split()[1])
   except:
      await message.reply("–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã!n–ü—Ä–∏–º–µ—Ä:n/–¥–∞—Ç—å 100")
      return
   if mtransfer < 0:
      await message.reply("–ê –º–∏–Ω—É—Å—ã –Ω–µ–ª—å–∑—è!üò∂")
      return
   for row in db.cursor.execute(f"SELECT money FROM users where id={message.from_user.id}"):
      if mtransfer > row[0]:
         await message.reply("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥!ü§ë")
         return
   user_to = message.reply_to_message.from_user
   db.UpdateUserValueMinus('money', mtransfer, message.from_user.id)
   db.UpdateUserValue('money', mtransfer, message.reply_to_message.from_user.id)
   db.con.commit()
   await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ <b>{mtransfer}</b>$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_to.last_name}ü§ó")


@dp.message_handler(commands=['p', '–ø', 'profile', '–ø—Ä–æ—Ñ–∏–ª—å'], commands_prefix='!?./')
async def profile(message):
   if not message.reply_to_message:
      for row in db.cursor.execute(f"SELECT reputation, money FROM users where id={message.from_user.id}"):
         await message.reply(f"üë§–ò–º—è: {message.from_user.first_name}\nüêï–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\nüÜî–ê–π–¥–∏: <code>{message.from_user.id}</code>\nüîù–†–µ–ø—É—Ç–∞—Ü–∏—è: {row[0]}\nüí∏–î–µ–Ω—å–≥–∏: {row[1]}$")
   else:
      for row in db.cursor.execute(f"SELECT reputation, money FROM users where id={message.reply_to_message.from_user.id}"):
         await message.reply(f"üë§–ò–º—è: {message.reply_to_message.from_user.first_name}\nüêï–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.reply_to_message.from_user.username}\nüÜî–ê–π–¥–∏: <code>{message.reply_to_message.from_user.id}</code>\nüîù–†–µ–ø—É—Ç–∞—Ü–∏—è: {row[0]}\nüí∏–î–µ–Ω—å–≥–∏: {row[1]}$")


@dp.message_handler(commands=['leaderboard', 'top', '–ª–∏–¥–µ—Ä—ã', '—Ç–æ–ø'], commands_prefix='!?./')
async def leaderboard(message):
   db.cursor.execute(f"SELECT name, money FROM users ORDER BY money DESC LIMIT 10")
   leadermsg = "<b>–¢–û–ü 10 –ü–û –î–ï–ù–¨–ì–ê–ú</b>:\n\n"
   fetchleader = db.cursor.fetchall()
   for i in fetchleader:
      leadermsg += f"{fetchleader.index(i) + 1}) {i[0]}:  {i[1]}$\n"
   await message.reply(str(leadermsg))


@dp.message_handler(commands=['—Å—Ç–∞—Ç–∞'], commands_prefix='!?./')
async def stats(message):
   db.cursor.execute("SELECT id FROM users")
   users = db.cursor.fetchall()
   db.cursor.execute(f"SELECT chat_id FROM chats")
   chats = db.cursor.fetchall()
   await message.reply(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {str(len(users))}\nüí¨–ß–∞—Ç–æ–≤ –≤ –±–æ—Ç–µ: {str(len(chats))}')


@dp.message_handler(commands=['userpost', '—é–∑–µ—Ä–ø–æ—Å—Ç'], commands_prefix='!?./')
async def userpost(message):
   if message.from_user.id == (admin_id):
      userpost_text = " ".join(message.text.split()[1:])
      db.cursor.execute(f"SELECT id FROM users")
      users_query = db.cursor.fetchall()
      user_ids = [user[0] for user in users_query]
      confirm = []
      decline = []
      await message.reply('–†–∞—Å—Å—ã–ª–∫–∞ —é–∑–µ—Ä–ø–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
      for user_send in user_ids:
         try:
            await bot.send_message(user_send, userpost_text)
            confirm.append(user_send)
         except:
            decline.append(user_send)
      await message.answer(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ —é–∑–µ—Ä–ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')
   else:
      await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


@dp.message_handler(commands=['chatpost', '—á–∞—Ç–ø–æ—Å—Ç'], commands_prefix='!?./')
async def chatpost(message):
   if message.from_user.id == (admin_id):
      chatpost_text = " ".join(message.text.split()[1:])
      db.cursor.execute(f"SELECT chat_id FROM chats")
      chats_query = db.cursor.fetchall()
      chats_ids = [chat[0] for chat in chats_query]
      confirm = []
      decline = []
      await message.reply('–†–∞—Å—Å—ã–ª–∫–∞ —á–∞—Ç–ø–æ—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
      for chat_send in chats_ids:
         try:
            await bot.send_message(chat_send, chatpost_text)
            confirm.append(chat_send)
         except:
            decline.append(chat_send)
      await message.answer(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ —á–∞—Ç–ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}')
   else:
      await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")


@dp.message_handler(commands=['voice', '–≤–æ–π—Å'], commands_prefix='!?./')
async def voice(message):
   lang_code = os.environ.get("lang_code", "ru")
   cust_lang = None
   voice_text = message.text.split()[1:]
   if len(voice_text) > 200:
      await message.reply("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –±–æ–ª—å—à–µ 200!")
      return
   try:
      await message.delete()
   except:
      await message.answer("–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞—éüò¨")
   tts = gTTS(voice_text, lang=lang_code)
   tts.save('voice.mp3')
   await bot.send_voice(message.chat.id, open("voice.mp3", "r"), caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>')
   os.remove("voice.mp3")


@dp.message_handler(commands=['report', '—Ä–µ–ø–æ—Ä—Ç'], commands_prefix='!?./')

async def report(message):

   if message.chat.type == '(—Å—Å—ã–ª–∫–∞)':

      admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
      report_comment = " ".join(message.text.split()[1:])
      await message.reply("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

      for adm_id in admins_list:

         await bot.send_message(adm_id, text=f'–ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç!\nhttps://t.me/{message.chat.username}/{message.reply_to_message.message_id}\n–ü—Ä–∏—á–∏–Ω–∞: <b>{report_comment}</b>')
   else:
      await message.reply("–†–µ–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö!")


@dp.message_handler(lambda msg: msg.text.lower() == '–∞–¥–º–∫–º–¥')
async def check_bot(message):
    await message.reply('–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /—é–∑–µ—Ä–ø–æ—Å—Ç (–ø–æ—Å—Ç) - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ –±–æ—Ç, /—á–∞—Ç–ø–æ—Å—Ç (–ø–æ—Å—Ç) - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç, /—Å—Ç–∞—Ç–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞')


@dp.message_handler(content_types=['text'])
async def filter_text(message):

   if message.chat.type != 'private':
      db.cursor.execute(f"SELECT chat_name, chat_id FROM chats where chat_id = {message.chat.id}")
      if db.cursor.fetchone() == None:
         db.InsertChatValues(message.chat.title, message.chat.id)

   db.cursor.execute(f"SELECT name FROM users where id = {message.from_user.id}")
   if db.cursor.fetchone() == None:
      db.InsertUserValues(message.from_user.first_name, message.from_user.id)

   if message.chat.type != "private":
      admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
      if message.from_user.id not in admins_list:
         if '@' in message.text:
            await message.delete()
         for entity in message.entities:
            if entity.type in ["url", "text_link"]:
               await message.delete()


if __name__ == "__main__":
   executor.start_polling(dp, on_startup=started, skip_updates=True)